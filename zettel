#!/bin/bash
set -e
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m' 

# -- utils --
function fail() {
  echo -e "${RED}ERROR: $1${NC}" > /dev/tty
  exit 1
}

function echo_green {
	echo -e "${GREEN}${1}${NC}" > /dev/tty
}

function echo_yellow {
	echo -e "${YELLOW}${1}${NC}" > /dev/tty
}

function list_zettels {
  set +e
  echo "$(find $ZETTEL_DIR  -type f -exec basename {} \;)"  > /dev/tty
  set -e
}

function find_zettel {
  # validate search field were procided and create search fields for grep
  search_fields="$1"
  if [[ -z "$search_fields" ]];then
     list_zettels
    fail "Could not find a zettel because search fields were not provided"
  fi
  search_fields=$(echo "$search_fields" | sed 's/ /|/g' | sed 's/,/|/g')

  # look for the zettel
  set +e
  zettels=$(find $ZETTEL_DIR  -type f -exec basename {} \; | grep -e "$search_fields")
  set -e

  # validate only 1 zettel was retutned
  if [[ -z "$zettels" ]]; then
    fail "Failed to find a zettel with search criteria '$search_fields'"
  fi
  number_zettels=$(echo "$zettels" | wc -l)
  if [ "$number_zettels" -gt "1" ]; then
    echo "$zettels" > /dev/tty
    fail "Multiple zettle's were returned matching the search criteria."
  fi

  echo "$zettels"
}

function git_push() {
  if [[ "$ZETTEL_AUTO_GIT_PUSH" == "true" ]]; then
    cwd=$(pwd)
    cd "$ZETTEL_DIR"
    echo "$1" > /dev/tty
    git add ${@:2}
    git commit -m "$1" --quiet
    git push --quiet
    cd "$cwd"
  fi
}

function remove_zettel_link() {
  zettel="$1"
  line_number=$(cat "$ZETTEL_DIR/$zettel" | grep -n "$zettel" | grep "-" | grep ")" | awk -F ":" '{print $1}' | head -n 1)
  sed -i.bak "${line_number}d" "$ZETTEL_DIR/$zettel"
  rm "$ZETTEL_DIR/$zettel.bak"
}

function new() {
 title="$@"
  if [[ -z "$title" ]]; then
    echo "usage: $0 create <zettel title>"
    fail "Zettel title not provided"
  fi
  title=$(echo "$title" | sed 's/ /-/g')
  default_tags="#exampletag"
  now=$(date +%s)
  zettel_title="# $now $title"
  zettel_fname="$ZETTEL_DIR/$now-$title.md"

  if [ -f "$zettel_fname" ]; then
    fail "zettel '$zettel_fname' already exists"
  fi

  zettel_template=$(cat <<-END
$zettel_title
$default_tags



## Links
END
)
  touch "$zettel_fname"
  echo "$zettel_template" > "$zettel_fname"
  before=$(cat "$zettel_fname" | md5)
  vi +4 "$zettel_fname"
  after=$(cat "$zettel_fname" | md5)

  if [[ "$before" != "$after" ]]; then
    git_push "added zettel $now-$title.md" "$zettel_fname"
    echo_green "created zettel '$now-$title.md'"
  else
    rm -f $zettel_fname
    echo_yellow "WARNING: Zettel was not created since the contents are empty"
  fi
}

function open_vi() {
  search_fields="$1"
  zettel=$(find_zettel "$search_fields" || exit)
  
  before=$(cat "$ZETTEL_DIR/$zettel" | md5)
  vi +4 "$ZETTEL_DIR/$zettel"
  after=$(cat "$ZETTEL_DIR/$zettel" | md5)
  
  if [[ "$before" != "$after" ]]; then
    git_push "updating zettel $zettel" "$zettel"
    echo_green "updated '$zettel'"
  fi
}

function open_browser() {
  search_fields="$1"
  zettel=$(find_zettel "$search_fields" || exit)

  github_endpoint=$(cd $ZETTEL_DIR && git remote show origin | grep "Push " | awk -F ":" '{print $3}' | sed 's/.git//g')
  open -a "Google Chrome" "https://github.com/$github_endpoint/tree/master/kasten/$zettel"
}

function link() {
  from_link=$1
  to_link=$2

  # do validation here to give usage error message
  # associated with the link action
  if [[ -z "$from_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty from_link argument"
  fi
  if [[ -z "$to_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty to_link argument"
  fi

  from_fname=$(find_zettel "$from_link")
  to_fname=$(find_zettel "$to_link")

  echo "- [$from_fname]($from_fname)" >> "$ZETTEL_DIR/$to_fname"
  echo "- [$to_fname]($to_fname)" >> "$ZETTEL_DIR/$from_fname"

  git_push \
    "added link between $from_fname and $to_fname" \
    "$from_fname" \
    "$to_fname"
  
  echo_green "linked zettels $to_fname <---> $from_fname"
}

function rm_link() {
  from_link=$1
  to_link=$2

  # do validation here to give usage error message
  # associated with the link action
  if [[ -z "$from_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty from_link argument"
  fi
  if [[ -z "$to_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty to_link argument"
  fi

  from_fname=$(find_zettel "$from_link")
  to_fname=$(find_zettel "$to_link")

  remove_zettel_link $from_fname
  remove_zettel_link $to_fname

  git_push \
    "remove link between $from_fname and $to_fname" \
    "$from_fname" \
    "$to_fname"

  echo_green "removed link $to_fname <---> $from_fname"
}

function home() {
  new_home_dir=$1
  # if new home dir is empty then print out dir
  if [[ -z "$new_home_dir" ]]; then
    echo "Current Zettel directory: $ZETTEL_DIR"
  else
    echo "export ZETTEL_DIR=\"$new_home_dir\""
  fi
}

# perform a 'git pull' in the kasten directory
function sync() {
  cd $ZETTEL_DIR && git pull
}

function main() {
  # mandatory env
  if [[ -z "$ZETTEL_DIR" ]]; then
    fail "Environment variable ZETTEL_DIR is required"
  fi

  # attempt to create zettel dir
  if [ ! -d "$ZETTEL_DIR" ]; then
    echo "Attempting to create '$ZETTEL_DIR' since it does not exist"
    mkdir "$ZETTEL_DIR"
    echo "Created zettel directory '$ZETTEL_DIR'"
  fi

  # perform zettel actions
  action=$1
  if [[ "$action" == "new" ]]; then
    new "${@:2}"
  elif [[ "$action" == "open" ]]; then
    open_vi "$2"
  elif [[ "$action" == "open-browser" ]]; then
    open_browser "$2"
  elif [[ "$action" == "link" ]]; then
    link "$2" "$3"
  elif [[ "$action" == "rm-link" ]]; then
    rm_link "$2" "$3"
  elif [[ "$action" == "home" ]]; then
    home "$2"
  elif [[ "$action" == "sync" ]]; then
    sync
  else
    echo "usage: $0 <action>"
    fail "Invalid action '$action'. Supported actions are: new, open and link"
  fi
}

main $@