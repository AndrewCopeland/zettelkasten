#!/bin/bash
set -e
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m' 
zk_config="$HOME/.zettelkasten"


# multi-lined strings
USAGE=$(cat <<-END

Usage:	zk COMMAND

A note taking application following the Zettelkasten method.

Commands:
  n, new            Create a new zettel
  o, open           Open an existing zettel in vi
  oc, open-code     Open an existing zettel in Visual Studio Code
  ob, open-browser  Open an existing zettel in github using Google Chome
  t, tag            Search zettels for a specific tag
  s, search         Search for a sub string within all zettels
  ls, list          List all zettels
  rm, remove        Remove a zettel
  l, link           Link 2 zettels together
  rml, rm-link      Remove a link between 2 zettels
  s, sync           Sync git zettelkasten to local zettelkasten
  home              Display zettelkasten home directory
  init              Initialize the $HOME/.zettelkasten
END
)

function new_zettel_default() {
  zettel_title="$1"
  default_tags="#exampletag"
  zettel_template=$(cat <<-END
$zettel_title
$default_tags



## Links
END
)
  echo "$zettel_template"
}

# -- utils --
function echo_usage() {
  echo "$USAGE"
}

function fail() {
  echo -e "${RED}ERROR: $1${NC}" > /dev/tty
  exit 1
}

function echo_green() {
	echo -e "${GREEN}${1}${NC}" > /dev/tty
}

function echo_yellow() {
	echo -e "${YELLOW}${1}${NC}" > /dev/tty
}

function list_zettels() {
  set +e
  echo "$(find $ZETTELKASTEN_DIR  -type f -exec basename {} \;)"  > /dev/tty
  set -e
}

function find_zettel() {
  # validate search field were procided and create search fields for grep
  search_fields="$1"
  if [[ -z "$search_fields" ]];then
     list_zettels
    fail "Could not find a zettel because search fields were not provided"
  fi
  search_fields=$(echo "$search_fields" | sed 's/ /|/g' | sed 's/,/|/g')

  # look for the zettel
  set +e
  zettels=$(find $ZETTELKASTEN_DIR  -type f -exec basename {} \; | grep -e "$search_fields")
  set -e

  # validate only 1 zettel was retutned
  if [[ -z "$zettels" ]]; then
    fail "Failed to find a zettel with search criteria '$search_fields'"
  fi
  number_zettels=$(echo "$zettels" | wc -l)
  if [ "$number_zettels" -gt "1" ]; then
    echo "$zettels" > /dev/tty
    fail "Multiple zettle's were returned matching the search criteria."
  fi

  echo "$zettels"
}

function git_push() {
  if [[ "$ZETTELKASTEN_AUTO_GIT_PUSH" == "yes" ]]; then
    cwd=$(pwd)
    cd "$ZETTELKASTEN_DIR"
    echo "$1" > /dev/tty
    git add ${@:2}
    git commit -m "$1" --quiet
    git push --quiet
    cd "$cwd"
  fi
}

function remove_zettel_link() {
  zettel="$1"
  link="$2"
  link="\- \[$link\]($link)"
  line_number=$(cat "$ZETTELKASTEN_DIR/$zettel" | grep -n "$link" | awk -F ':' '{print $1}' | head -n 1)
  sed -i.bak "${line_number}d" "$ZETTELKASTEN_DIR/$zettel"
  rm "$ZETTELKASTEN_DIR/$zettel.bak"
}

function get_os_environment_type() {
  # if '/prov/version' files exists then assume running in 'WSL'
  if [ -f "/proc/version" ]; then
    echo "wsl"
  else
    # default to osx
    echo "osx"
  fi
}

function fail_invalid_environment() {
  fail "Invalid environment '${environment}'. Valid environment: osx or wsl"
}

function get_default_md5() {
  environment="${1}"
  case "${environment}" in
    "osx")
      echo "md5"
      ;;

    "wsl")
      echo "md5sum"
      ;;

    *)
      fail_invalid_environment
      ;;
  esac
}

function get_default_basename() {
  environment="${1}"
  case "${environment}" in
    "osx")
      echo "basename --"
      ;;

    "wsl")
      echo "basename -a"
      ;;

    *)
      fail_invalid_environment
      ;;
  esac
}

function get_zettel_md5() {
  zettel="${1}"
  zettel_fname="${ZETTELKASTEN_DIR}/${zettel}"
  cat "$zettel_fname" | $ZETTELKASTEN_MD5_COMMAND
}

# -- commands --
function new() {
  title="$@"
  if [[ -z "$title" ]]; then
    echo "usage: $0 create <zettel title>"
    fail "Zettel title not provided"
  fi

  title=$(echo "$title" | sed 's/ /-/g')
  default_tags="#exampletag"
  now=$(date +%s)
  zettel_title="# $now $title"
  zettel="$now-$title.md"
  zettel_fname="$ZETTELKASTEN_DIR/${zettel}"
  if [ -f "$zettel_fname" ]; then
    fail "zettel '$zettel_fname' already exists"
  fi

  zettel_template=$(new_zettel_default "$zettel_title")
  touch "$zettel_fname"
  echo "$zettel_template" > "$zettel_fname"

  before=$(get_zettel_md5 "${zettel}")
  vi +4 "$zettel_fname"
  after=$(get_zettel_md5 "${zettel}")

  if [[ "$before" != "$after" ]]; then
    git_push "added zettel ${zettel}" "${zettel_fname}"
    echo_green "created zettel '${zettel}'"
  else
    rm -f $zettel_fname
    echo_yellow "WARNING: Zettel was not created since the contents are empty"
  fi
}

function open_vi() {
  search_fields="$1"
  zettel=$(find_zettel "$search_fields" || exit)
  
  before=$(get_zettel_md5 "${zettel}")
  vi +4 "$ZETTELKASTEN_DIR/$zettel"
  after=$(get_zettel_md5 "${zettel}")
  
  if [[ "$before" != "$after" ]]; then
    git_push "updating zettel $zettel" "$zettel"
    echo_green "updated '$zettel'"
  fi
}

function open_visual_code() {
  search_fields="$1"
  zettel=$(find_zettel "$search_fields" || exit)
  
  before=$(get_zettel_md5 "${zettel}")
  code --new-window --wait "$ZETTELKASTEN_DIR/$zettel"
  after=$(get_zettel_md5 "${zettel}")
  
  if [[ "$before" != "$after" ]]; then
    git_push "updating zettel $zettel" "$zettel"
    echo_green "updated '$zettel'"
  fi
}

function open_browser() {
  search_fields="$1"
  zettel=$(find_zettel "$search_fields" || exit)

  github_endpoint=$(cd $ZETTELKASTEN_DIR && git remote show origin | grep "Push " | awk -F ":" '{print $3}' | sed 's/.git//g')
  open -a "Google Chrome" "https://github.com/$github_endpoint/tree/master/$ZETTELKASTEN_GIT_DIR/$zettel"
}

function link() {
  from_link=$1
  to_link=$2

  # do validation here to give usage error message
  # associated with the link action
  if [[ -z "$from_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty from_link argument"
  fi
  if [[ -z "$to_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty to_link argument"
  fi

  from_fname=$(find_zettel "$from_link")
  to_fname=$(find_zettel "$to_link")

  echo "- [$from_fname]($from_fname)" >> "$ZETTELKASTEN_DIR/$to_fname"
  echo "- [$to_fname]($to_fname)" >> "$ZETTELKASTEN_DIR/$from_fname"

  git_push \
    "added link between $from_fname and $to_fname" \
    "$from_fname" \
    "$to_fname"
  
  echo_green "linked zettels $to_fname <---> $from_fname"
}

function rm_link() {
  from_link=$1
  to_link=$2

  # do validation here to give usage error message
  # associated with the link action
  if [[ -z "$from_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty from_link argument"
  fi
  if [[ -z "$to_link" ]]; then
    echo "usage: $0 link 1584648495 1584648508"
    fail "Empty to_link argument"
  fi

  from_fname=$(find_zettel "$from_link")
  to_fname=$(find_zettel "$to_link")

  remove_zettel_link $from_fname $to_fname
  remove_zettel_link $to_fname $from_fname

  git_push \
    "remove link between $from_fname and $to_fname" \
    "$from_fname" \
    "$to_fname"

  echo_green "removed link $to_fname <---> $from_fname"
}

function home() {
  new_home_dir=$1
  # if new home dir is empty then print out dir
  if [[ -z "$new_home_dir" ]]; then
    echo "Current Zettel directory: $ZETTELKASTEN_DIR"
  else
    echo "export ZETTELKASTEN_DIR=\"$new_home_dir\""
  fi
}

function append_to_zettelkasten_config() {
  key="${1}"
  value="${2}"

  echo "${key}=\"${value}\"" >> "${zk_config}"
}

function init() {
  read -p "Zettelkasten Directory: " zk_dir
  read -p "Zettelkasten auto git push[yes/no]: " zk_auto_git_push
  read -p "Zettelkasten git directory(optional): " zk_git_dir

  if [ ! -d "${zk_dir}" ]; then
    fail "Directory '${zk_dir}' does not exist"
  fi 

  zk_auto_git_push=$(echo $zk_auto_git_push | tr '[:upper:]' '[:lower:]')
  if [[ "${zk_auto_git_push}" != "yes" ]]; then
    zk_auto_git_push="no"
  fi

  environment=$(get_os_environment_type)
  md5_command=$(get_default_md5 "${environment}")
  basename_command=$(get_default_basename "${environment}")
  rm -f "${zk_config}"

  # the values specified in the '~/.zettelkasten'
  # the directory in which all zettels reside
  append_to_zettelkasten_config "ZETTELKASTEN_DIR" "${zk_dir}"
  # auto push zettels to git when created, updated or deleted [yes|no]
  append_to_zettelkasten_config "ZETTELKASTEN_AUTO_GIT_PUSH" "${zk_auto_git_push}"
  # the directory in the git repo where the zettels reside. 
  # if zettels reside on repo root level then this does not need to be provided
  # this is only used when executing 'open-browser'
  append_to_zettelkasten_config "ZETTELKASTEN_GIT_DIR" "${zk_git_dir}"
  # the os environment in which the zk application is being run [osx|wsl]
  append_to_zettelkasten_config "ZETTELKASTEN_ENVIRONMENT" "${environment}"
  # the command used when md5 hashing zettels
  append_to_zettelkasten_config "ZETTELKASTEN_MD5_COMMAND" "${md5_command}"
  # the command used when getting the basename of zettels
  append_to_zettelkasten_config "ZETTELKASTEN_BASENAME_COMMAND" "${basename_command}"
}

# perform a 'git pull' in the kasten directory
function sync() {
  if [[ "$ZETTELKASTEN_AUTO_GIT_PUSH" == "yes" ]]; then
    cd $ZETTELKASTEN_DIR && git pull
  fi
}

# remove a specific zettel and make sure this is reflected in git
function remove() {
  search_fields="$1"
  zettel=$(find_zettel "$search_fields" || exit)
  rm -f "$ZETTELKASTEN_DIR/$zettel"
  git_push "removing zettel $zettel" "$zettel"
}

function find_tag() {
  tag="${1}"
  tag="#${tag} "
  search_content "${tag}"
}

function search_content() {
  sub_string="${1}"
  $ZETTELKASTEN_BASENAME_COMMAND $(grep -rnl "$ZETTELKASTEN_DIR" -e "${sub_string}")
}

function list() {
  set +e
  find $ZETTELKASTEN_DIR -type f -exec basename {} \;
  set -e
}

function main() {
  # mandatory env
  if [ ! -f "${zk_config}" ]; then
    echo "'${zk_config}' could not be found"
    init
  fi
  source "${zk_config}"

  # attempt to create zettel dir
  if [ ! -d "$ZETTELKASTEN_DIR" ]; then
    echo "Attempting to create '$ZETTELKASTEN_DIR' since it does not exist"
    mkdir "$ZETTELKASTEN_DIR"
    echo "Created zettel directory '$ZETTELKASTEN_DIR'"
  fi

  # perform zettel actions
  sync &>/dev/null
  action=$1
  case $action in
    "new-vi" | "new" | "n")
      new "${@:2}"
      ;;
    
    "new-code" | "nc")
      new_visual_code "${@:2}"
      ;;

    "open-vi" | "open" | "ov" | "o")
      open_vi "$2"
      ;;

    "open-browser" | "ob")
      open_browser "$2"
      ;;

    "open-code" | "oc")
      open_visual_code "$2"
      ;;

    "link" | "l")
      link "$2" "$3"
      ;;

    "remove-link" | "rm-link" | "rml")
      rm_link "$2" "$3"
      ;;

    "remove"  | "rm")
      remove "$2"
      ;;

    "tag" | "t")
      find_tag "$2"
      ;;

    "search"| "s")
      search_content "${2}"
      ;;
    
    "list" | "ls")
      list
    ;;

    "home")
      home "$2"
      ;;

    "sync" | "s")
      sync
      ;;
    
    "init")
      init
      ;;

    *)
      echo "Invalid action '$action' check usage below."
      echo_usage
      ;;
  esac
}

main $@